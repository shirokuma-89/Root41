<ライブラリ>
Adafruit_NeoPixel.h
フルカラーLED（NeoPixel）を制御するためのライブラリ

FaBoLCDmini_AQM0802A.h
LCDを制御するためのライブラリ

MPU6050_6Axis_MotionApps20.h
ジャイロセンサ（MPU-6050）からデータを取得するためのライブラリ

Rotary.h
ロータリーエンコーダを扱うためのライブラリ

Timer5.h
Timer5（ArduinoMEGAのみ）を扱うためのライブラリ

Wire.h
I2C通信を行うためのライブラリ


<マクロ - define>
Gyro_X
ジャイロのX軸のオフセット値

Gyro_Y
ジャイロのY軸のオフセット値

Gyro_Z
ジャイロのZ軸のオフセット値

Accel_X
加速度センサのX軸のオフセット値

Accel_Y
加速度センサのY軸のオフセット値

Accel_Z
仮想度センサのZ軸のオフセット値

その他、各種ピン番号の為省略


<クラス - 変数・関数>

[class _ball(ball)]
void read(int* b){}
ボールセンサをすべて読み込む。値はアドレスを渡した配列に格納される。

bool exist = true;
ボールを検出しているかどうかを格納する変数

int val[16];
ボールセンサの値を格納する変数

int top;
一番反応の強いボールセンサの番号を格納する変数

int deg;
ボールの方向を格納する変数

int old_top;
ボールセンサの前回の一番反応の強いボールセンサの番号を格納する変数

int top_backup;
一番反応の強いボールセンサの番号の生データ（処理されていない）を格納する変数

float x;
ベクトルで計算するときなどのボールのX座標を格納する変数

float y;
ベクトルで計算するときなどのボールのY座標を格納する変数

unsigned long resetTimer = 0;
ボールセンサをリセットする間隔を計測するタイマー変数

unsigned long resettingTimer = 0;
ボールセンサのリセット動作時間を計測するタイマー変数

[class _line(line)]
_line(void){}
変数の初期化を行う関数

void read(void){}
ラインセンサの値を取得する関数

bool flug = false;
ライン動作中かどうかを格納する変数

bool near = false;
ラインの近くにいるかどうかを格納する変数

bool touch = false;
ライン上にいるかどうかを格納する変数

bool val[4];
ラインセンサの値（生データ）を格納する変数

int deg = 1000;
ライン上にいるときの回避動作の角度を指定する変数

int outMove = 1000;
ラインから出た状態での一定時間動作内の回避動作の角度を指定する変数

int mode = 0;
ラインを踏んでからライン回避動作が終了するまでの状態遷移を格納する変数

int offset = 0;
ラインを踏んだ際のジャイロセンサの値を格納する変数

int first = 5;
原則（例外処理可）1番目に反応したセンサ番号を格納する変数

int second = 5;
原則（例外処理可）2番目に反応したセンサ番号を格納する変数

unsigned long inTimer;
ラインに最初にふれた時のタイマーを格納する変数

unsigned long outTimer;
ラインの反応が無くなった時のタイマーを格納する変数
